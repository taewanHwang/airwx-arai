🚀 최종 Exaone API 메타데이터 추출 테스트
📝 프롬프트 길이: 1355 문자
📄 콘텐츠 길이: 1196 문자
------------------------------------------------------------
📊 응답 상태: 200
청크 1: {"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세...
JSON 파싱 오류: Extra data: line 1 column 1579 (char 1578)
원시 데이터: {"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "", "answer": "", "references": [{}], "progress_state": "planning"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "", "answer": "", "references": [{}], "progress_state": "optimizing"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "{\"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "title", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\":", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "Ex", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "a", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "one", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 개발", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 노트", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "summary", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\":", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "EX", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "A", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "ONE", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "은", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " LG", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " AI", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Research", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "에서", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 개발", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "한", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " ", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "3", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "2", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "B", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 파", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "라미", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "터", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 초", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "거대", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " AI", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 모델", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "로", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " A", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "RA", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "I", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 프로젝트", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "에서", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Text", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Generation", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " API", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "와", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Chat", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Completion", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " API", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "를", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 활용", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "하여", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 개발", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 중", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "이다", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ".", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 주요", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 기능", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "으로", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "는", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 텍스트", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 생성", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 요약", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 메타", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "데이터", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 추출", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 대화", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "형", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " AI", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 웹", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "검색", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 문서", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " QA", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 등", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "이", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 있", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "으며", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 한국어", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 특화", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 멀티", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "턴", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 대화", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Intent", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 자동", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 분류", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 등의", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 특징", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "을", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 갖", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "는", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "다", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ".", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 현재", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " No", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "tion", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " API", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 통합", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 테스트", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 메타", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "데이터", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 추출", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 프롬", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "프트", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 최적화", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 백", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "엔드", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " API", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 개발", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "이", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 진행", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 중이", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "며", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 향후", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " DB", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 생성", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Query", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " with", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " prompts", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 구현", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Docker", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 컨테이너", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "화", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 베타", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 테스트", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 환경", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 구축", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "이", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 예정", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "되", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "어", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 있", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "다", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ".", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 기술", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 스택", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "은", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " React", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " ", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "1", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "8", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Express", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ".", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "js", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Node", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ".", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "js", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Docker", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 등", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "을", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 사용", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "하", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "며", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " API", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Rate", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " Limit", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "과", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 모델", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 파", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "라미", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "터", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 설정", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 등", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 참고", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "사항", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "이", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 명시", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "되", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "어", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " 있", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "다", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": ".", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "top", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "ics", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\":", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " [\"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "EX", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "A", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "ONE", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "AI", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "LL", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "M", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "API", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "No", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "tion", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "AR", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "AI", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "개발", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "노트", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\",", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": " \"", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "메타", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "데이터", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "\"]", "references": [{}], "progress_state": "answering"}}{"result_code": 200, "description": null, "data": {"query": "문서를 분석하여 실제 내용을 바탕으로 다음 정보를 JSON으로 추출하세요.\n\n문서: # Exaone 개발 노트\n\n## 프로젝트 개요\nEXAONE은 LG AI Research에서 개발한 초거대 AI 모델입니다. 이 문서는 EXAONE API를 활용한 ARAI 프로젝트 개발 과정을 기록합니다.\n\n## 주요 기능\n\n### 1. Text Generation API\n- 모델: 32B 파라미터  \n- 엔드포인트: `/v1/chatexaone/text-generation`\n- 기능: 텍스트 생성, 요약, 메타데이터 추출\n\n### 2. Chat Completion API\n- 엔드포인트: `/v1/chatexaone/chat-completion`\n- 기능: 대화형 AI, 웹검색, 문서 QA\n\n### 3. 주요 특징\n- 스트리밍 응답 지원\n- 한국어 특화 모델\n- 멀티턴 대화 지원\n- Intent 자동 분류 (chitchat, web_search, document_answer 등)\n\n## 개발 진행사항\n\n### 완료된 작업\n1. ✅ API 인증 및 연결 테스트\n2. ✅ Text Generation 엔드포인트 검증\n3. ✅ 메타데이터 추출 프롬프트 설계\n4. ✅ Notion API 통합 준비\n\n### 진행 중인 작업\n- 🔄 Notion + Exaone API 통합 테스트\n- 🔄 메타데이터 추출 프롬프트 최적화\n- 🔄 백엔드 API 개발\n\n### 예정된 작업\n- ⏳ Flow2: DB 생성 및 메타데이터 저장\n- ⏳ Flow3: Query with prompts 구현\n- ⏳ Docker 컨테이너화\n- ⏳ 베타 테스트 환경 구축\n\n## 기술 스택\n- **Frontend**: React 18 + TypeScript + Vite\n- **Backend**: Express.js + Node.js\n- **AI**: EXAONE 32B API\n- **Integration**: Notion API\n- **Deployment**: Docker\n\n## 참고사항\n- API Rate Limit: 일 5000회, 분당 60회\n- 모델 파라미터: `model: \"32b\"` 필수\n- Temperature 권장값: 0.1-0.8 (용도에 따라 조절)\n- 최대 토큰 제한 고려 필요\n\n## 다음 단계\n1. Notion 페이지 콘텐츠 자동 추출 완성\n2. 메타데이터 DB 스키마 설계  \n3. 사용자 쿼리 시스템 구현\n4. 성능 최적화 및 테스트\n\n## 태그\n#EXAONE #AI #LLM #API #Notion #ARAI #개발노트 #메타데이터\n\n위 문서를 읽고 실제 내용에 기반하여 아래 형식으로 응답하세요:\n\n{\"title\": \"실제 문서 제목\", \"summary\": \"문서의 실제 내용 요약\", \"topics\": [\"실제 주요 주제들\"]}", "intent": "chitchat", "answer": "}", "references": [{}], "progress_state": "answering"}}

총 1개 청크 처리됨
✅ 응답 완료!
📄 전체 응답:
----------------------------------------

----------------------------------------

🔍 발견된 JSON 후보: 0개
